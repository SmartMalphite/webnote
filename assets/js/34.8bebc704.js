(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{754:function(t,a,n){"use strict";n.r(a);var s=n(103),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"故障注入-代码级故障模拟"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#故障注入-代码级故障模拟"}},[t._v("#")]),t._v(" 故障注入: 代码级故障模拟")]),t._v(" "),n("h2",{attrs:{id:"背景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),n("p",[t._v("对于一个大型的分布式的微服务系统，模拟各个环节、各个服务调用链过程中的异常十分必要。且这些故障模拟必须做到无侵入地集成到系统中，可以手工激活这些故障观测系统表现是否符合期望。")]),t._v(" "),n("h2",{attrs:{id:"方案期望"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方案期望"}},[t._v("#")]),t._v(" 方案期望")]),t._v(" "),n("ul",[n("li",[t._v("功能诉求:")])]),t._v(" "),n("ol",[n("li",[t._v("微服务中某个服务出现随机延迟、某个服务不可用。")]),t._v(" "),n("li",[t._v("存储系统磁盘 I/O 延迟增加、I/O 吞吐量过低、落盘时间长。")]),t._v(" "),n("li",[t._v("调度系统中出现热点，某个调度指令失败。")]),t._v(" "),n("li",[t._v("充值系统中模拟第三方重复请求充值成功回调接口。")]),t._v(" "),n("li",[t._v("游戏开发中模拟玩家网络不稳定、掉帧、延迟过大等，以及各种异常输入（外挂请求）情况下系统是否正确工作。")])]),t._v(" "),n("ul",[n("li",[t._v("方案诉求")])]),t._v(" "),n("ol",[n("li",[t._v("不能影响正常功能逻辑，不能对功能代码有任何侵入")]),t._v(" "),n("li",[t._v("故障注入的代码最终不能出现在最终发行的二进制文件中。")]),t._v(" "),n("li",[t._v("故障注入的代码必须是易读、易写并且能引入编译器检测。")]),t._v(" "),n("li",[t._v("支持并行测试，可以通过指定控制某个故障点是否激活")])]),t._v(" "),n("h2",{attrs:{id:"方案选型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方案选型"}},[t._v("#")]),t._v(" 方案选型")]),t._v(" "),n("p",[t._v("Go故障注入解决方案中有两个项目应用比较广泛 即etcd团队的gofail以及PingCap公司的failpoint\n经过实际调研与体验，gofail存在一些问题，包括:")]),t._v(" "),n("ul",[n("li",[t._v("故障注入代码以注释的形式注入在代码中，编译器无法检查其语法正确性，且转换后的代码可读性基本为0；")]),t._v(" "),n("li",[t._v("无法进行精确控制，开启注入后即激活所有故障点，对并行测试不友好；")]),t._v(" "),n("li",[t._v("编译后的代码可能会影响代码行数，即原本在第10行的代码，转换后可能变到了第12行，对于故障排查与代码定位不优化")])]),t._v(" "),n("p",[t._v("综上，选择更加人性化的failpoint方案；")]),t._v(" "),n("blockquote",[n("p",[n("code",[t._v("Failpoint")]),t._v(" 项目有PingCap公司开发，它是 FreeBSD failpoints 的 Golang 实现，允许在代码中注入错误或异常行为， 并由环境变量或代码动态激活来触发这些异常行为。Failpoint 能用于各种复杂系统中模拟错误处理来提高系统的容错性、正确性和稳定性；对于任何一个 Golang 代码的源文件，可以通过解析出这个文件的语法树，遍历整个语法树，找出所有 failpoint 注入点，然后对语法树重写，转换成想要的逻辑。")])]),t._v(" "),n("h2",{attrs:{id:"原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),n("p",[t._v("宏的本质是什么？如果追本溯源，发现其实可以通过 AST 重写在 Golang 中实现满足以上条件的 failpoint，原理如下图所示：\n"),n("img",{attrs:{src:"https://raw.githubusercontent.com/enbo-wang/PicBed/master/img/20201015113637.png",alt:"20201015113637"}}),t._v("\n对于任何一个 Golang 代码的源文件，可以通过解析出这个文件的语法树，遍历整个语法树，找出所有 failpoint 注入点，然后对语法树重写，转换成想要的逻辑。\n"),n("img",{attrs:{src:"https://raw.githubusercontent.com/enbo-wang/PicBed/master/img/20201015113724.png",alt:"20201015113724"}})]),t._v(" "),n("h2",{attrs:{id:"failpoint环境搭建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#failpoint环境搭建"}},[t._v("#")]),t._v(" failpoint环境搭建")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('cd $GOPATH/src\n\nmkdir -p github.com/pingcap\n\ncd github.com/pingcap\n\ngit clone https://github.com/pingcap/failpoint.git\n \ncd failpoint\n\nmake\nGO111MODULE=on CGO_ENABLED=0 GO111MODULE=on go build  -ldflags \'-X "github.com/pingcap/failpoint/failpoint-ctl/version.releaseVersion=12f4ac2-dev" -X "github.com/pingcap/failpoint/failpoint-ctl/version.buildTS=2019-11-15 09:41:49" -X "github.com/pingcap/failpoint/failpoint-ctl/version.gitHash=12f4ac2fd11dfc6b2f7018b00bb90f61a5b6b692" -X "github.com/pingcap/failpoint/failpoint-ctl/version.gitBranch=master" -X "github.com/pingcap/failpoint/failpoint-ctl/version.goVersion=go version go1.13 darwin/amd64"\' -o bin/failpoint-ctl failpoint-ctl/main.go\nfailpoint-ctl build successfully :-) !\n')])])]),n("p",[t._v("编译后，生成可执行文件failpoint-ctl：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("ll bin\ntotal 6840\n-rwxr-xr-x  1 lanyang  staff   3.3M 11 15 17:41 failpoint-ctl\n")])])]),n("h2",{attrs:{id:"故障注入与激活"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#故障注入与激活"}},[t._v("#")]),t._v(" 故障注入与激活")]),t._v(" "),n("h3",{attrs:{id:"_1-注入故障代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-注入故障代码"}},[t._v("#")]),t._v(" 1.注入故障代码")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github.com/pingcap/failpoint"')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    failpoint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Inject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"testPanic"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("panic")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"failpoint triggerd"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_2-代码转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-代码转换"}},[t._v("#")]),t._v(" 2.代码转换")]),t._v(" "),n("p",[t._v("将代码转换为故障注入代码")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$GOPATH/src/github.com/pingcap/failpoint/bin/failpoint-ctl enable\n")])])]),n("p",[t._v("启用后，会生成以下文件，且故障点代码进行转换\n"),n("img",{attrs:{src:"https://raw.githubusercontent.com/enbo-wang/PicBed/master/img/20201015115031.png",alt:"20201015115031"}}),t._v("\n将代码还原")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$GOPATH/src/github.com/pingcap/failpoint/bin/failpoint-ctl disable\n")])])]),n("p",[t._v("还原后，额外生成的文件被删除，代码还原")]),t._v(" "),n("h3",{attrs:{id:"_3-代码执行-激活故障"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-代码执行-激活故障"}},[t._v("#")]),t._v(" 3.代码执行&激活故障")]),t._v(" "),n("p",[t._v("正常执行")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("./your-program\n")])])]),n("p",[t._v("激活故障")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('GO_FAILPOINTS="main/testPanic=return(true)" ./your-program //可以指定要激活那些故障点\n')])])]),n("h2",{attrs:{id:"进阶-精细控制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进阶-精细控制"}},[t._v("#")]),t._v(" 进阶-精细控制")]),t._v(" "),n("p",[t._v("有时为了进行并行测试，即激活故障注入点不影响其他人的测试，可以通过context.Context增加一个Hook 这样就可以精细化控制failpoint；")]),t._v(" "),n("p",[t._v("通过WithHook函数包装一个回调函数，通过内置一些判断逻辑可以判断是否需要命中故障点；改回调函数入参为context和故障点名称，内部可以通过context的Value判断，也可以通过其他方式判断，这里可以根据需求自行控制即可；")]),t._v(" "),n("p",[t._v("demo代码如下:")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("sctx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" failpoint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithHook")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fpname "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//fmt.Printf("hook ctx %v,%v\\n",ctx,fpname) // ctx可以省略')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//return ctx.Value(fpname) != nil // Determine by ctx key")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Request"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("URL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RawQuery "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mock=true"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nfailpoint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("InjectContext")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"common_info"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val failpoint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mock error 2: %v\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ResponseSuccess")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ping mock point2"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h2",{attrs:{id:"附录-failpoint-maker函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#附录-failpoint-maker函数"}},[t._v("#")]),t._v(" 附录: failpoint Maker函数")]),t._v(" "),n("h3",{attrs:{id:"marker-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#marker-函数"}},[t._v("#")]),t._v(" Marker 函数")]),t._v(" "),n("p",[t._v("AST 重写阶段标记需要被重写的部分，主要有以下功能：")]),t._v(" "),n("ul",[n("li",[t._v("提示 Rewriter 重写为一个相等的 IF 语句。\n"),n("ul",[n("li",[t._v("标记函数的参数是重写过程中需要用到的参数。")]),t._v(" "),n("li",[t._v("标记函数是一个空函数，编译过程会被 inline，进一步被消除。")]),t._v(" "),n("li",[t._v("标记函数中注入的 failpoint 是一个闭包，如果闭包访问外部作用于变量，闭包语法允许捕获外部作用域变量，不会出现编译错误， 同时转换后的的代码是一个 IF 语句，IF  语句访问外部作用域变量不会产生任何问题，所以闭包捕获只是为了语法合法，最终不会有任何额外开销。")])])]),t._v(" "),n("li",[t._v("简单、易读、易写。")]),t._v(" "),n("li",[t._v("引入编译器检测，如果 Marker 函数的参数不正确，程序不能通过编译的，进而保证转换后的代码正确性。")])]),t._v(" "),n("p",[t._v("目前支持的 Marker 函数列表：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("func Inject(fpname string, fpblock func(val Value)) {}\nfunc InjectContext(fpname string, ctx context.Context, fpblock func(val Value)) {}\nfunc Break(label ...string) {}\nfunc Goto(label string) {}\nfunc Continue(label ...string) {}\nfunc Fallthrough() {}\nfunc Return(results ...interface{}) {}\nfunc Label(label string) {}\n")])])]),n("p",[t._v("关于其他的Maker函数的用法可以参考"),n("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1420489",target:"_blank",rel:"noopener noreferrer"}},[t._v('"PingCap官方文档"'),n("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);