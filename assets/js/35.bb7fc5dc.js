(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{756:function(e,a,t){"use strict";t.r(a);var n=t(103),s=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"混沌测试-系统级故障模拟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#混沌测试-系统级故障模拟"}},[e._v("#")]),e._v(" 混沌测试: 系统级故障模拟")]),e._v(" "),t("h2",{attrs:{id:"背景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[e._v("#")]),e._v(" 背景")]),e._v(" "),t("p",[e._v("随着容器技术的普及以及借助着K8s容器编排能力，业务开发的灵活性和部署速度显著提高，但随之带来的是系统的复杂性以及可靠性测试的难度逐渐上升。随着业务的发展以及分布式系统的规模逐渐壮大，我们需要在系统中的弱点通过生产环境暴露给用户之前，主动发现。这时候"),t("code",[e._v("混沌工程")]),e._v("的引入就十分必要。")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("混沌工程")]),e._v("是在分布式系统上进行实验的学科, 目的是建立对系统抵御生产环境中失控条件的能力以及信心。(有时即使分布式系统中的所有单个服务都正常运行, 这些服务之间的交互也会导致不可预知的结果。这些不可预知的结果, 由影响生产环境的罕见且具有破坏性的事件复合而成，令这些分布式系统存在内在的混沌。)")])]),e._v(" "),t("h2",{attrs:{id:"当前qa在测试过程中遇到的痛点、难点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#当前qa在测试过程中遇到的痛点、难点"}},[e._v("#")]),e._v(" 当前QA在测试过程中遇到的痛点、难点")]),e._v(" "),t("p",[e._v("1.多数场景下，测试的链路覆盖只能覆盖到常规或正常的业务逻辑链路。对于某些异常场景，例如上下游服务的异常等。构造起来十分困难、需要其他团队协作甚至在测试环境中无法模拟，对于这种无法覆盖到的场景一旦在线上发生就有可能出现未知的行为甚至导致系统的异常；缺少一种有效且简单的故障模拟手段去发现问题")]),e._v(" "),t("p",[e._v("2.系统可靠性测试难以进行，对于对可靠性要求较高的金融交易系统，测试过程中出了要掌握各个业务流程的行为，也需要对服务在某些恶劣场景下的表现作出评估")]),e._v(" "),t("p",[e._v("3.系统告警。多数场景下配置的告警策略等在测试环境难以触发，导致了监控告警本身不可信，也就难以完全信赖告警的结果去判断系统是否正常。")]),e._v(" "),t("p",[e._v("4.待补充")]),e._v(" "),t("h2",{attrs:{id:"方案期望"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方案期望"}},[e._v("#")]),e._v(" 方案期望")]),e._v(" "),t("p",[e._v("1.所使用方案对代码入侵性低甚至没有，这样可以将测试配置与代码解耦，避免操作不当引发的代码漏发上线等问题。")]),e._v(" "),t("p",[e._v("2.兼容当前团队使用的系统架构与业务场景；对于当前目标场景，需要支持对K8S集群的控制能力且能精确控制到pod级别")]),e._v(" "),t("p",[e._v("3.支持的故障模拟范围包括但不限于: CPU/Mem 高负载，网络高延迟、异常(丢包、数据包乱序)等")]),e._v(" "),t("h2",{attrs:{id:"方案选型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方案选型"}},[e._v("#")]),e._v(" 方案选型")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/enbo-wang/PicBed/master/img/20200925172708.png",alt:"20200925172708"}}),e._v(" "),t("a",{attrs:{href:"https://github.com/chaosblade-io/chaosblade",target:"_blank",rel:"noopener noreferrer"}},[e._v("ChaosBlade"),t("OutboundLink")],1),e._v(",阿里开源的混沌模型注入工具。目前支持的场景有：基础资源、Java 应用、C++ 应用、Docker 容器以及 Kubernetes 平台。")]),e._v(" "),t("h2",{attrs:{id:"云原生场景下的方案实施"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#云原生场景下的方案实施"}},[e._v("#")]),e._v(" 云原生场景下的方案实施")]),e._v(" "),t("blockquote",[t("p",[e._v("这里只介绍下ChaosBlade在K8S平台下的使用，其他场景与应用下的使用可以参考"),t("a",{attrs:{href:"https://chaosblade-io.gitbook.io/chaosblade-help-zh-cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"_1-概念引入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念引入"}},[e._v("#")]),e._v(" 1.概念引入")]),e._v(" "),t("h4",{attrs:{id:"_1-kubernetes-k8s"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-kubernetes-k8s"}},[e._v("#")]),e._v(" 1.Kubernetes（k8s）")]),e._v(" "),t("p",[e._v("Kubernetes（k8s）是自动化容器操作的开源平台，这些操作包括部署，调度和节点集群间扩展。\n"),t("img",{attrs:{src:"https://raw.githubusercontent.com/enbo-wang/PicBed/master/img/20200927232325.png",alt:"20200927232325"}})]),e._v(" "),t("h4",{attrs:{id:"_2-pod"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-pod"}},[e._v("#")]),e._v(" 2.POD")]),e._v(" "),t("p",[e._v("Pod（上图绿色方框）安排在节点上，包含一组容器和卷。同一个Pod里的容器共享同一个网络命名空间，可以使用localhost互相通信。Pod是短暂的，不是持续性实体。")]),e._v(" "),t("h4",{attrs:{id:"_3-replication-controller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-replication-controller"}},[e._v("#")]),e._v(" 3.Replication Controller")]),e._v(" "),t("p",[e._v("Replication Controller确保任意时间都有指定数量的Pod“副本”在运行。如果为某个Pod创建了Replication Controller并且指定3个副本，它会创建3个Pod，并且持续监控它们。如果某个Pod不响应，那么Replication Controller会替换它")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("replication controller与deployment的区别: "),t("code",[e._v("Replication Controller(RC)")]),e._v("为Kubernetes的一个核心内容，应用托管到Kubernetes之后，需要保证应用能够持续的运行，Replication Controller就是这个保证的key；"),t("code",[e._v("Deployment")]),e._v("同样为Kubernetes的一个核心内容，主要职责同样是为了保证pod的数量和健康，90%的功能与Replication Controller完全一样，可以看做新一代的Replication Controller，具备一些新的特性。")])]),e._v(" "),t("h4",{attrs:{id:"_4-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-node"}},[e._v("#")]),e._v(" 4.Node")]),e._v(" "),t("p",[e._v("Node（节点）是物理或者虚拟机器，")]),e._v(" "),t("h4",{attrs:{id:"_5-chaosblade-operator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-chaosblade-operator"}},[e._v("#")]),e._v(" 5.ChaosBlade-Operator")]),e._v(" "),t("p",[t("code",[e._v("ChaosBlade-Operator")]),e._v("是 ChaosBlade 的 Kubernetes 平台实验场景实现。将混沌实验通过 Kubernetes 标准的 CRD 方式定义，用户可以像定义 Deployment 或 StatefulSet 那样定义 ChaosBlade 实验，只要对 kubectl 和 Kubernetes 对象有所了解，就可以轻松的创建、更新和删除实验场景；同时也可以通过 chaosblade cli 工具来操作实验场景。")]),e._v(" "),t("h3",{attrs:{id:"_2-环境安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-环境安装"}},[e._v("#")]),e._v(" 2.环境安装")]),e._v(" "),t("p",[e._v("ChaosBlade-Operator 需要使用 Helm 安装")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 安装Helm")]),e._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 下载安装包")]),e._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" -qO chaosblade-operator-0.6.0.tgz https://chaosblade.oss-cn-hangzhou.aliyuncs.com/agent/github/0.6.0/chaosblade-operator-0.6.0-v3.tgz\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 为 chaosblade 创建一个 namespace")]),e._v("\n$ kubectl create namespace chaosblade\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 安装 ChaosBlade-Operator")]),e._v("\n$ helm "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" chaos chaosblade-operator-0.6.0.tgz --set webhook.enable"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true --namespace"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("chaosblade\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看安装结果")]),e._v("\n$ kubectl get pod -n chaosblade "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" chaosblade\nchaosblade-operator-6b6b484599-gdgq8   "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("/1     Running   "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("          4d23h\nchaosblade-tool-7wtph                  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("/1     Running   "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("          4d20h\nchaosblade-tool-r4zdk                  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("/1     Running   "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("          4d23h\n")])])]),t("p",[e._v("ChaosBlade-Operator 启动后将会在每个节点部署一个 chaosblade-tool Pod 和一个 chaosblade-operator Pod，如果都运行正常，则安装成功。上面设置 --set webhook.enable=true 是为了 Pod 文件系统 I/O 故障实验，如果不需要进行该实验，则无需添加该设置。")]),e._v(" "),t("h3",{attrs:{id:"_3-常用实验"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-常用实验"}},[e._v("#")]),e._v(" 3.常用实验")]),e._v(" "),t("h4",{attrs:{id:"_1-container实验场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-container实验场景"}},[e._v("#")]),e._v(" 1.Container实验场景")]),e._v(" "),t("p",[e._v("通用执行命令")]),e._v(" "),t("p",[e._v("container-id获取方式")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubectl -n xxx-xxx-xx-xxxx get pod xxxx-xxxx-xxxx-xxxx -o custom-columns=CONTAINER:.status.containerStatuses[0].name,ID:.status.containerStatuses[0].containerID\n")])])]),t("p",[e._v("执行命令，开始试验")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ kubectl apply -f remove_container_by_id.yaml\n")])])]),t("p",[e._v("查看试验状态")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("执行 kubectl get blade remove-container-by-id -o json 命令，查看实验状态。\n")])])]),t("p",[e._v("停止实验")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("执行命令：kubectl delete -f remove_container_by_id.yaml\n\n或者直接删除 blade 资源：kubectl delete blade remove-container-by-id\n")])])]),t("h5",{attrs:{id:"_1-1-删除-container"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-删除-container"}},[e._v("#")]),e._v(" 1.1 删除 container")]),e._v(" "),t("blockquote",[t("p",[e._v("实验目的: 在container层面模拟服务异常重启情况下的服务、数据流处理情况(模拟故障发生时或服务再次回复)")])]),e._v(" "),t("p",[e._v("remove_container_by_id.yaml 内容：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('apiVersion: chaosblade.io/v1alpha1\nkind: ChaosBlade\nmetadata:\n  name: remove-container-by-id\nspec:\n  experiments:\n  - scope: container\n    target: container\n    action: remove\n    desc: "remove container by id"\n    matchers:\n    - name: container-ids\n      value: ["c6cdcf60b82b854bc4bab64308b466102245259d23e14e449590a8ed816403ed"]\n      # pod name\n    - name: names\n      value: ["guestbook-7b87b7459f-cqkq2"]\n    - name: namespace\n      value: ["chaosblade"]\n')])])]),t("h5",{attrs:{id:"_1-2-cpu负载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-cpu负载"}},[e._v("#")]),e._v(" 1.2 CPU负载")]),e._v(" "),t("blockquote",[t("p",[e._v("实验目的: 在container层面模拟服务高负载场景下业务处理能力的表现(高负载下易高频触发某些代码执行异常)")])]),e._v(" "),t("p",[e._v("increase_container_cpu_load_by_id.yaml 内容：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('apiVersion: chaosblade.io/v1alpha1\nkind: ChaosBlade\nmetadata:\n  name: increase-container-cpu-load-by-id\nspec:\n  experiments:\n  - scope: container\n    target: cpu\n    action: fullload\n    desc: "increase container cpu load by id"\n    matchers:\n    - name: container-ids\n      value:\n      - "5ad91eb49c1c6f8357e8d455fd27dad5d0c01c5cc3df36a3acdb1abc75f68a11"\n    - name: cpu-percent\n      value: ["100"]\n      # pod names\n    - name: names\n      value: ["redis-slave-55d8c8ffbd-jd8sm"]\n    - name: namespace\n      value: ["chaosblade"]\n')])])]),t("h5",{attrs:{id:"_1-3-网络异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-网络异常"}},[e._v("#")]),e._v(" 1.3 网络异常")]),e._v(" "),t("blockquote",[t("p",[e._v("实验目的: 在container层面模拟服务网络异常(高时延、网络数据包异常等场景下的服务表现)")])]),e._v(" "),t("p",[e._v("delay_container_network_by_id.yaml 内容：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('apiVersion: chaosblade.io/v1alpha1\nkind: ChaosBlade\nmetadata:\n  name: delay-container-network-by-id\nspec:\n  experiments:\n  - scope: container\n    target: network\n    action: delay\n    desc: "delay container network by container id"\n    matchers:\n    - name: container-ids\n      value:\n      - "02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e"\n    - name: names\n      value:\n      - "redis-master-68857cd57c-hknb6"\n    - name: namespace\n      value:\n      - "chaosblade"\n    - name: local-port\n      value: ["6379"]\n    - name: interface\n      value: ["eth0"]\n    - name: time\n      value: ["3000"]\n    - name: offset\n      value: ["1000"]\n\n')])])]),t("p",[e._v("观测实验结果")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 获取实验 pod ip\n$ kubectl get pod -l app=redis,role=master -o jsonpath={.status..podIP}\n10.42.69.44\n\n# 测试时间\n$ time echo \"\" | telnet 10.42.69.44 6379\nTrying 10.42.69.44...\nConnected to 10.42.69.44.\nEscape character is '^]'.\nConnection closed by foreign host.\nreal    0m3.790s\nuser    0m0.007s\nsys     0m0.001s\n")])])]),t("p",[e._v("一些其他实验的模拟可以参考: "),t("a",{attrs:{href:"https://xie.infoq.cn/article/ae2e7258a442df625a7787b7f",target:"_blank",rel:"noopener noreferrer"}},[e._v('"Container实验模拟"'),t("OutboundLink")],1)]),e._v(" "),t("h4",{attrs:{id:"_2-pod实验场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-pod实验场景"}},[e._v("#")]),e._v(" 2.POD实验场景")]),e._v(" "),t("p",[e._v("通用执行命令")]),e._v(" "),t("p",[e._v("执行命令，开始试验")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ kubectl apply -f remove_container_by_id.yaml\n")])])]),t("p",[e._v("查看试验状态")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("执行 kubectl get blade remove-container-by-id -o json 命令，查看实验状态。\n")])])]),t("p",[e._v("停止实验")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("执行命令：kubectl delete -f remove_container_by_id.yaml\n\n或者直接删除 blade 资源：kubectl delete blade remove-container-by-id\n")])])]),t("h5",{attrs:{id:"_2-1-pod网络异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-pod网络异常"}},[e._v("#")]),e._v(" 2.1 POD网络异常")]),e._v(" "),t("blockquote",[t("p",[e._v("实验目的: 在pod层面模拟服务网络异常(高时延、网络数据包异常等场景下的服务表现)")])]),e._v(" "),t("p",[e._v("delay_pod_network_by_names.yaml 内容：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('apiVersion: chaosblade.io/v1alpha1\nkind: ChaosBlade\nmetadata:\n  name: delay-pod-network-by-names\nspec:\n  experiments:\n  - scope: pod\n    target: network\n    action: delay\n    desc: "delay pod network by names"\n    matchers:\n    - name: names\n      value:\n      - "redis-master-68857cd57c-dzbs9"\n    - name: namespace\n      value:\n      - "chaosblade"\n    - name: local-port\n      value: ["6379"]\n    - name: interface\n      value: ["eth0"]\n    - name: time\n      value: ["3000"]\n    - name: offset\n      value: ["1000"]\n')])])]),t("p",[e._v("观测实验结果")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 获取实验 pod ip\n$ kubectl get pod -l app=redis,role=master -o jsonpath={.status..podIP}\n10.42.69.44\n\n# 测试时间\n$ time echo \"\" | telnet 10.42.69.44 6379\nTrying 10.42.69.44...\nConnected to 10.42.69.44.\nEscape character is '^]'.\nConnection closed by foreign host.\nreal    0m3.790s\nuser    0m0.007s\nsys     0m0.001s\n")])])]),t("h5",{attrs:{id:"_2-2-删除pod"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-删除pod"}},[e._v("#")]),e._v(" 2.2 删除pod")]),e._v(" "),t("p",[e._v("delete_pod_by_labels.yaml 内容：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('apiVersion: chaosblade.io/v1alpha1\nkind: ChaosBlade\nmetadata:\n  name: delete-two-pod-by-labels\nspec:\n  experiments:\n  - scope: pod\n    target: pod\n    action: delete\n    desc: "delete pod by labels"\n    matchers:\n    - name: labels\n      value:\n      - "role=master"\n    - name: namespace\n      value:\n      - "chaosblade"\n    - name: evict-count\n      value:\n      - "2"\n')])])]),t("p",[e._v("一些其他实验的模拟可以参考: "),t("a",{attrs:{href:"https://xie.infoq.cn/article/053151fbbc830d3baa53d33e4",target:"_blank",rel:"noopener noreferrer"}},[e._v('"POD实验模拟"'),t("OutboundLink")],1)]),e._v(" "),t("h4",{attrs:{id:"_3-node实验场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-node实验场景"}},[e._v("#")]),e._v(" 3.Node实验场景")]),e._v(" "),t("p",[e._v("Node级别的实验影响面会比较广，因为某个团队的某些pod会分布在目标node上，不是十分可控，此方式建议用在灾难演练(集群中部分Node瘫痪)时使用，这里就不做具体展开介绍了")]),e._v(" "),t("p",[e._v("Node的实验可以参考 "),t("a",{attrs:{href:"https://xie.infoq.cn/article/9f8601e2092242a638813fb29",target:"_blank",rel:"noopener noreferrer"}},[e._v('"Node实验模拟"'),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"相关链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关链接"}},[e._v("#")]),e._v(" 相关链接")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://chaosblade.io/try/",target:"_blank",rel:"noopener noreferrer"}},[e._v('"互动教程"'),t("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=s.exports}}]);